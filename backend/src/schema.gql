# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Board {
  columns: BoardColumnsConnection!
  createdAt: DateTime!
  id: ID!
  name: String!
  tasks: [Task!]!
  updatedAt: DateTime!
}

type BoardColumn {
  createdAt: DateTime!
  id: ID!
  name: String!
  position: Int!
  tasks: [Task!]!
  updatedAt: DateTime!
}

type BoardColumnNameConflictError implements ErrorResponse {
  message: String!
}

type BoardColumnNotFoundError implements ErrorResponse {
  message: String!
}

type BoardColumnsConnection {
  nodes: [BoardColumn!]!
  totalCount: Int!
}

type BoardNameConflictError implements ErrorResponse {
  message: String!
}

input CreateBoardInput {
  board: NewBoardInput!
}

union CreateBoardResponse = BoardNameConflictError | CreateBoardSuccess | InvalidInputError

type CreateBoardSuccess {
  board: Board!
}

input CreateTaskInput {
  task: NewTaskInput!
}

union CreateTaskResponse = BoardColumnNotFoundError | CreateTaskSuccess | InvalidInputError

type CreateTaskSuccess {
  task: Task!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteBoardInput {
  id: ID!
}

union DeleteBoardResponse = DeleteBoardSuccess | NotFoundError

type DeleteBoardSuccess {
  deletedId: ID!
}

input DeleteTaskInput {
  id: ID!
}

union DeleteTaskResponse = DeleteTaskSuccess | NotFoundError

type DeleteTaskSuccess {
  deletedId: ID!
}

interface ErrorResponse {
  message: String!
}

type InvalidInputError implements ErrorResponse {
  message: String!
}

input LoginCredentialsInput {
  password: String!
  username: String!
}

input LoginInput {
  credentials: LoginCredentialsInput!
}

union LoginResponse = LoginSuccess | UnauthorizedError

type LoginSuccess {
  user: User!
}

type LogoutResponse {
  success: Boolean!
}

type Mutation {
  createBoard(input: CreateBoardInput!): CreateBoardResponse!
  createTask(input: CreateTaskInput!): CreateTaskResponse!
  deleteBoard(input: DeleteBoardInput!): DeleteBoardResponse!
  deleteTask(input: DeleteTaskInput!): DeleteTaskResponse!
  login(input: LoginInput!): LoginResponse!
  logout: LogoutResponse!
  signup(input: SignupInput!): SignupResponse!
  updateBoard(input: UpdateBoardInput!): UpdateBoardResponse!
  updateBoardColumns(input: UpdateBoardColumnsInput!): UpdateBoardColumnsResponse!
  updateSubtaskCompleted(input: UpdateSubtaskCompletedInput!): UpdateSubtaskCompletedResponse!
  updateTask(input: UpdateTaskInput!): UpdateTaskResponse!
}

input NewBoardColumnInput {
  name: String!
}

input NewBoardInput {
  columns: [NewBoardColumnInput!]
  name: String!
}

input NewSubtaskInput {
  title: String!
}

input NewTaskInput {
  boardColumnId: ID!
  description: String
  subtasks: [NewSubtaskInput!]
  title: String!
}

input NewUserInput {
  password: String!
  username: String!
}

type NotFoundError implements ErrorResponse {
  message: String!
}

type Query {
  board(id: ID!): Board
  boards: [Board!]!
  hello: String!
  task(id: ID!): Task
  viewer: User!
}

input SignupInput {
  user: NewUserInput!
}

union SignupResponse = InvalidInputError | SignupSuccess | UserUsernameConflictError

type SignupSuccess {
  user: User!
}

type Subtask {
  completed: Boolean!
  createdAt: DateTime!
  id: ID!
  title: String!
  updatedAt: DateTime!
}

type Task {
  column: BoardColumn!
  createdAt: DateTime!
  description: String!
  id: ID!
  subtasks: TaskSubtasksConnection!
  title: String!
  updatedAt: DateTime!
}

type TaskSubtasksConnection {
  completedCount: Int!
  nodes: [Subtask!]!
  totalCount: Int!
}

type UnauthorizedError implements ErrorResponse {
  message: String!
}

input UpdateBoardColumnInput {
  id: ID!
  patch: UpdateBoardColumnPatchInput!
}

input UpdateBoardColumnPatchInput {
  name: String
}

input UpdateBoardColumnsInput {
  boardId: ID!
  patch: UpdateBoardColumnsPatchInput!
}

input UpdateBoardColumnsPatchAdditionInput {
  column: NewBoardColumnInput!

  """
  Alias for the ID of the created column. Can be referenced in the "UpdateBoardColumnsPatchInput.columnOrder" array to add and order columns in a single request.
  """
  idAlias: ID
}

input UpdateBoardColumnsPatchInput {
  additions: [UpdateBoardColumnsPatchAdditionInput!]
  columnOrder: [ID!]
  deletions: [ID!]
  updates: [UpdateBoardColumnInput!]
}

union UpdateBoardColumnsResponse = BoardColumnNameConflictError | InvalidInputError | NotFoundError | UpdateBoardColumnsSuccess

type UpdateBoardColumnsSuccess {
  board: Board!
}

input UpdateBoardInput {
  id: ID!
  patch: UpdateBoardPatchInput!
}

input UpdateBoardPatchInput {
  name: String
}

union UpdateBoardResponse = BoardNameConflictError | InvalidInputError | NotFoundError | UpdateBoardSuccess

type UpdateBoardSuccess {
  board: Board!
}

input UpdateSubtaskCompletedInput {
  completed: Boolean!
  id: ID!
}

union UpdateSubtaskCompletedResponse = NotFoundError | UpdateSubtaskCompletedSuccess

type UpdateSubtaskCompletedSuccess {
  subtask: Subtask!
}

input UpdateTaskInput {
  id: ID!
  patch: UpdateTaskPatchInput!
}

input UpdateTaskPatchInput {
  boardColumnId: ID
  description: String
  title: String
}

union UpdateTaskResponse = BoardColumnNotFoundError | NotFoundError | UpdateTaskSuccess

type UpdateTaskSuccess {
  task: Task!
}

type User {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  username: String!
}

type UserUsernameConflictError implements ErrorResponse {
  message: String!
}